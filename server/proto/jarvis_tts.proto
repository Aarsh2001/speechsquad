// Copyright (c) 2020, NVIDIA CORPORATION.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

option java_multiple_files = true;
option java_package = "com.nvidia.speechsquad";
option java_outer_classname = "HelloWorldProto";

package nvidia.jarvis.tts;

service JarvisTTS {
  // Used to request speech-to-text from the service. Submit a request
  // containing the desired text and configuration, and receive audio bytes in
  // the requested format.
  rpc Synthesize(SynthesizeSpeechRequest) returns (SynthesizeSpeechResponse) {}

  // Used to request speech-to-text returned via stream as it becomes available.
  // Submit a SynthesizeSpeechRequest with desired text and configuration,
  // and receive stream of bytes in the requested format.
  rpc SynthesizeOnline(SynthesizeSpeechRequest)
      returns (stream SynthesizeSpeechResponse) {}
}

/*
 * AudioEncoding specifies the encoding of the audio bytes in the encapsulating
 * message.
 */
enum AudioEncoding {
  // Not specified.
  ENCODING_UNSPECIFIED = 0;

  // Uncompressed 16-bit signed little-endian samples (Linear PCM).
  LINEAR_PCM = 1;

  // `FLAC` (Free Lossless Audio
  // Codec) is the recommended encoding because it is
  // lossless--therefore recognition is not compromised--and
  // requires only about half the bandwidth of `LINEAR16`. `FLAC` stream
  // encoding supports 16-bit and 24-bit samples, however, not all fields in
  // `STREAMINFO` are supported.
  FLAC = 2;

  // 8-bit samples that compand 14-bit audio samples using G.711 PCMU/mu-law.
  MULAW = 3;

  // 8-bit samples that compand 13-bit audio samples using G.711 PCMU/a-law.
  ALAW = 20;
}

message SynthesizeSpeechRequest {
  string text = 1;
  string language_code = 2;
  // audio encoding params
  AudioEncoding encoding = 3;
  int32 sample_rate_hz = 4;
  // voice params
  string voice_name = 5;
}

message SynthesizeSpeechResponse { bytes audio = 1; }
